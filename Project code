ENTITY CLASSES CODE:

Student class code:

package com.vits.entity;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
//import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;

import com.fasterxml.jackson.annotation.JsonIgnore;

@Entity
public class Student {
	    @Id
	    @GeneratedValue(strategy = GenerationType.IDENTITY)
	    private Long st_id;
	    private String fname;
	    private String lname;
	    private String dob;
	    private Long phno;
	    public Long getSt_id() {
			return st_id;
		}

		public void setSt_id(Long st_id) {
			this.st_id = st_id;
		}

		public String getfname() {
			return fname;
		}

		public void setfname(String fname) {
			this.fname = fname;
		}
public String getlname() {
			return lname;
		}

		public void setlname(String lname) {
			this.lname = lname;
		}
		public String getdob() {
			return dob;
		}

		public void setdob(String dob) {
			this.dob = dob;
		}
		public Long getphno() {
				return phno;
		}

		public void setphno(Long phno) {
				this.phno = phno;
		}
	    public Student() {
		}
public Student(Long st_id, String fname, String lname, String dob, Long phno ) {
			super();
			this.st_id = st_id;
			this.fname = fname;
			this.lname = lname;
			this.dob=dob;
			this.phno=phno;
		}

		@OneToMany(mappedBy = "student")
		@JsonIgnore
	    private Set<Courses> courses;

	}







Courses entity code:

package com.vits.entity;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
@Entity
public class Courses {

 public Courses() {
          }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long c_id;
    private String cname;
    private Long c_code;
    private Long credits;

    @ManyToOne
    @JoinColumn(name = "student_id")
    private Student student;

    @Override
public String toString() {
                return "Courses [course id=" + c_id + ", student=" + student + ", cname=" + cname + ", course code=" + c_code + "credits"+ credits +"]";}
public Courses(Long c_id, Student student, String cname, Long c_code, Long credits) {
          super();
          this.c_id = c_id;
          this.student = student;
           this.cname = cname;
         this.c_code = c_code;
          this.credits=credits;
}
      public Long getc_Id() {
              return c_id;}
    public void setal_Id(Long c_id) {
            this.c_id = c_id;}
            public Student getStudent() {
                     return student;}
        public void setStudent(Student student) {
                  this.student = student;}
          public String getcname() {
             return cname;}
         public void setcname(String cname) {
                      this.cname = cname;}
         public Long getc_code() {
                return c_code;}
       public void setc_code(Long c_code) {
                  this.c_code = c_code;}
           public Long getcredits() {
                     return credits;}
       public void setcredits(Long credits) {
               this.credits = credits;}

}

Department entity code:

package com.vits.entity;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
@Entity
public class Department {

    public Department(Long d_id, Student student, String d_name, int block) {
               super();
              this.d_id = d_id;
              this.student = student;
              this.d_name = d_name;
              this.block = block;}
    @Override
     public String toString() {
             return "Department [dept id=" + d_id + ", student=" + student+ ",+ dept name="+ d_name+ ", block=" + block+ "]";}
      public Long getd_Id() {
                    return d_id;}
       public void setd_Id(Long d_id) {
                 this.d_id = d_id;}
      public Student getstudent() {
              return student;}
       public void setstudent(Student student) {
               this.student = student;}
       public String getd_name() {
               return d_name;}
         public void setd_name(String d_name) {
             this.d_name = d_name;}
          public int getblock() {
                   return block;}
         public void setblock( int block) {
                  this.block = block;}
       @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long d_id;
    private String d_name;
     public Department() {
      super();}
     private int block;
    @ManyToOne
    @JoinColumn(name = "student_id")
             private Student student;}











	CONTROLLER CLASSES CODE:

StudentController code:

package com.vits.contoller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.vits.entity.Student;
import com.vits.service.StudentService;


@RestController
@RequestMapping("/api/student")
public class StudentController {

    @Autowired
    private StudentService studentService;

    @GetMapping
    public List<Student> getAllStudents() {
        return studentService.getAllStudents();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Student> getStudentById(@PathVariable Long id) {
        Student student = studentService.getStudentById(id);
        if (student != null) {
            return ResponseEntity.ok(student);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping
    public ResponseEntity<Student> createStudent(@RequestBody Student student) {
        Student createdStudent = studentService.createStudent(student);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdStudent);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Student> updateStudent(@PathVariable Long id, @RequestBody Student student) {
        Student updatedStudent = studentService.updateStudent(id, student);
        if (updatedStudent != null) {
            return ResponseEntity.ok(updatedStudent);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteStudent(@PathVariable Long id) {
        boolean deleted = studentService.deleteStudent(id);
        if (deleted) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }	
    }
}


CoursesController code:

package com.vits.contoller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.vits.entity.Courses;
import com.vits.service.CoursesService;



@RestController
@RequestMapping("/api/courses")
public class CoursesController {
    @Autowired
    private CoursesService coursesService;

    @GetMapping
    public List<Courses> getAllCourses() {
        return coursesService.getAllCourses();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Courses> getCoursesById(@PathVariable Long id) {
        Courses course = coursesService.getCourseById(id);
        if (course != null) {
            return ResponseEntity.ok(course);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping
    public ResponseEntity<Courses> createCourses(@RequestBody Courses course) {
        Courses createdCourses = coursesService.createCourses(course);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdCourses);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Courses> updateCourses(@PathVariable Long id, @RequestBody Courses course) {
        Courses updatedCourses = coursesService.updateCourse(id,course);
        if (updatedCourses != null) {
            return ResponseEntity.ok(updatedCourses);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteCourses(@PathVariable Long id) {
        boolean deleted = coursesService.deleteCourse(id);
        if (deleted) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
DepartmentController code:

package com.vits.contoller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.vits.entity.Department;
import com.vits.service.DepartmentService;

@RestController
@RequestMapping("/api/department")
public class DepartmentController {

    @Autowired
    private DepartmentService departmentService;

    @GetMapping
    public List<Department> getAlldepartments() {
        return departmentService.getAlldepartments();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Department> getDepartmentById(@PathVariable Long id) {
        Department department = departmentService.getDepartmentById(id);
        if (department != null) {
            return ResponseEntity.ok(department);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping
    public ResponseEntity<Department> createDepartment(@RequestBody Department department) {
        Department createdDepartment = departmentService.createDepartment(department);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdDepartment);
    }

    @PutMapping("/{id}")
   
 public ResponseEntity<Department> updateDepartment(@PathVariable Long id, @RequestBody Department department) {
        Department updatedDepartment = departmentService.updateDepartment(id, department);
        if (updatedDepartment!= null) {
            return ResponseEntity.ok(updatedDepartment);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{id}")
   
 public ResponseEntity<Void> deleteDepartment(@PathVariable Long id) {
        boolean deleted = departmentService.deleteDepartment(id);
        if (deleted) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}




SERVICE CLASSES CODE:

StudentService code:

package com.vits.service;

import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.vits.entity.Student;
import com.vits.repository.StudentRepository;

@Service
public class StudentService {

    @Autowired
    private StudentRepository studentRepository;

    public List<Student> getAllStudents() {
        return studentRepository.findAll();
    }
    public Student getStudentById(Long st_id) {
        Optional<Student> song = studentRepository.findById(st_id);
        return song.orElse(null);
    }
    public Student createStudent(Student student) {
        return studentRepository.save(student);
    }
    public Student updateStudent(Long st_id, Student updatedStudent) {
        Optional<Student> existingStudent = studentRepository.findById(st_id);
        if (existingStudent.isPresent()) {
            updatedStudent.setSt_id(st_id);
            return studentRepository.save(updatedStudent);
        } else {
            return null;
        }
    }
    public boolean deleteStudent(Long st_id) {
        Optional<Student> student = studentRepository.findById(st_id);
        if (student.isPresent()) {
            studentRepository.deleteById(st_id);
            return true;
        } else {
            return false;
        }}}
    CoursesService code:

package com.vits.service;

import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.vits.entity.Courses;
import com.vits.repository.CoursesRepository;

@Service
public class CoursesService {

    @Autowired
    private CoursesRepository coursesRepository;

    public List<Courses> getAllCourses() {
        return coursesRepository.findAll();
    }
    public Courses getCourseById(Long c_id) {
        Optional<Courses> course = coursesRepository.findById(c_id);
        return course.orElse(null);
    }
    public Courses createCourses(Courses course) {
        return coursesRepository.save(course);
    }
    public Courses updateCourse(Long c_id, Courses updatedCourse) {
        Optional<Courses> existingCourses = coursesRepository.findById(c_id);
        if (existingCourses.isPresent()) {
            updatedCourse.setal_Id(c_id);
            return coursesRepository.save(updatedCourse);
        } else {
            return null;
        }
    }
    public boolean deleteCourse(Long c_id) {
        Optional<Courses> course = coursesRepository.findById(c_id);
        if (course.isPresent()) {
            coursesRepository.deleteById(c_id);
            return true;
        } else {
            return false;
        }
    }
}

DepartmentService code:

package com.vits.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.vits.entity.Department;
import com.vits.repository.DepartmentRepository;

@Service
public class DepartmentService {

    @Autowired
    private DepartmentRepository departmentRepository;

    public List<Department> getAlldepartments() {
        return departmentRepository.findAll();
    }

    public Department getDepartmentById(Long id) {
        Optional<Department> department = departmentRepository.findById(id);
        return department.orElse(null);
    }
    public Department createDepartment(Department department) {
        return departmentRepository.save(department);
    }
    public Department updateDepartment(Long id, Department updatedDepartment) {
        Optional<Department> existingDepartment = departmentRepository.findById(id);
        if (existingDepartment.isPresent()) {
            updatedDepartment.setd_Id(id);
            return departmentRepository.save(updatedDepartment);
        } else {
            return null;
        }
    }

    public boolean deleteDepartment(Long id) {
        Optional<Department> department = departmentRepository.findById(id);
        if (department.isPresent()) {
            departmentRepository.deleteById(id);
            return true;
        } else {
            return false;
        }
    }
}


REPOSITORY CLASSES CODE:

StudentRepository code:

package com.vits.repository;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.vits.entity.Student;
@Repository
public interface StudentRepository extends JpaRepository<Student, Long> {
// You can add custom queries here if needed
}


CoursesRepository code:


package com.vits.repository;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.vits.entity.Courses;
@Repository
public interface CoursesRepository extends JpaRepository<Courses, Long> {
    // You can add custom queries here if needed
}


DepartmentRepository code:

package com.vits.repository;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.vits.entity.Department;
@Repository
public interface DepartmentRepository extends JpaRepository<Department, Long> {
// You can add custom queries here if needed
}



StudentManagementSystemApplication code:

package com.vits;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class StudentManagementSystemApplication {

	public static void main(String[] args) {
		SpringApplication.run(StudentManagementSystemApplication.class, args);
	}

}


ApplicationProperties code:

# DataSource configuration

spring.datasource.url=jdbc:mysql://localhost:3306/students_db?createDatabaseIfNotExist=true&serverTimezone=UTC&useSSL=false

spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA (Hibernate) configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Server configuration
server.port=8090

# Logging configuration
logging.level.org.springframework=INFO
logging.level.com.yourpackage=DEBUG

	
